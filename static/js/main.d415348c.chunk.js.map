{"version":3,"sources":["DnsClient.js","App.js","serviceWorker.js","index.js"],"names":["DnsClient","props","resolvers","name","url","state","queryName","queryType","queryDNSSEC","queryNoValidation","handleChange","bind","handleSubmit","event","target","type","this","setState","id","checked","value","result","undefined","resolver","fetch","method","then","res","json","isLoaded","error","preventDefault","Card","body","Container","fluid","Form","onSubmit","Row","Col","md","Group","controlId","Label","Control","onChange","as","custom","isValid","selected","map","qtype","index","key","placeholder","isInvalid","defaultValue","sm","Check","label","defaultChecked","Button","variant","Collapse","in","mountOnEnter","Question","record","Title","ianaTypes","Meaning","TYPE","k","d","filter","bit","join","Table","striped","bordered","hover","Answer","TTL","data","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d415348c.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Form, Container, Row, Col, Button, Table, Card, Collapse } from 'react-bootstrap'\n\nimport ianaTypes from './data/iana-types.json'\n\nexport class DnsClient extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = { queryName: 'example.com', queryType: 'A', queryDNSSEC: false, queryNoValidation: false }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  resolvers = [{\n    name: 'CloudFlare',\n    url: 'https://cloudflare-dns.com/dns-query',\n  }, {\n    name: 'Google',\n    url: 'https://dns.google/resolve',\n  }];\n\n  handleChange(event) {\n    switch (event.target.type) {\n      case 'checkbox': this.setState({ [event.target.name || event.target.id]: event.target.checked }); break;\n      default: this.setState({ [event.target.name || event.target.id]: event.target.value });\n    }\n  }\n  handleSubmit(event) {\n    this.setState({ result: undefined });\n\n    const url = `${this.state.resolver}?name=${this.state.queryName}&type=${this.state.queryType}`\n      + `&ct=application/dns-json`\n      + `${this.state.queryDNSSEC ? '&do' : ''}${this.state.queryNoValidation ? '&cd' : ''}`;\n\n    fetch(url, {\n      method: 'GET',\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n    event.preventDefault();\n  }\n\n  render() {\n    return (<>\n      <Card body>\n        <Container fluid>\n          <Form onSubmit={this.handleSubmit}>\n            <Row><Col md={2}>\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\n                <Form.Label>Query Type</Form.Label>\n\n                <Form.Control name={'queryType'} onChange={this.handleChange}\n                  as=\"select\"\n                  custom\n                  isValid={!this.state.queryType}\n                >\n                  <option selected>Choose...</option>\n                  {['A', 'AAAA', 'MX', 'TXT', 'NS', 'SRV', 'ANY'].map((qtype, index) =>\n                    <option key={index} value={qtype}\n                      selected={this.state.queryType === qtype}>{qtype}</option>\n                  )}\n                </Form.Control>\n              </Form.Group>\n            </Col><Col md={7}>\n                <Form.Group controlId=\"exampleForm.ControlInput1\">\n                  <Form.Label>Query Name</Form.Label>\n                  <Form.Control placeholder=\"example.net\"\n                    name={'queryName'}\n                    isInvalid={!this.state.queryName}\n                    defaultValue={this.state.queryName}\n                    onChange={this.handleChange} />\n                </Form.Group>\n              </Col>\n              <Col md={3}>\n                <Form.Group controlId=\"exampleForm.ControlInput1\">\n                  <Form.Label>Resolver:{' '}</Form.Label>\n                  <Form.Control name={'resolver'} onChange={this.handleChange}\n                    as=\"select\"\n                    custom\n                  >\n                    <option selected>Choose resolverâ€¦</option>\n                    {this.resolvers.map((resolver, index) =>\n                      <option key={index} value={resolver.url}\n                        selected={this.state.resolver?.url === resolver.url}>{resolver.name}</option>\n                    )}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n            </Row>\n            <Row>\n              <Col md={3} sm={6}>\n                <Form.Check\n                  type=\"switch\"\n                  id=\"queryDNSSEC\"\n                  label=\"Provide DNSSEC data\"\n                  defaultChecked={this.state.queryDNSSEC}\n                  onChange={this.handleChange} />\n              </Col>\n              <Col md={3} sm={6}>\n                <Form.Check\n                  type=\"switch\"\n                  id=\"queryNoValidation\"\n                  label=\"Disable validation\"\n                  defaultChecked={this.state.queryNoValidation}\n                  onChange={this.handleChange} />\n              </Col>\n              <Col md={3} sm={6}>\n                <Button variant=\"primary\" type=\"submit\">\n                  Submit\n                            </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </Card>\n      <Collapse in={this.state.result} mountOnEnter={true}><div>\n        <Card body>\n          {this.state.result?.Question?.map((record, index) =>\n            <Card.Title key={index}>Results for {ianaTypes[record.type].Meaning} ({ianaTypes[record.type].TYPE}) {record.name}</Card.Title>\n          )}\n          <Container fluid>\n            <Row>\n              <Col>\n                {[{ k: 'TC', d: 'DNS answer is larger than a single packet' },\n                { k: 'RD', d: 'DNS Recursive Desired' },\n                { k: 'RA', d: 'DNS Recursion Available' },\n                { k: 'AD', d: 'All DNS records were verified against DNSSEC' },\n                { k: 'CD', d: 'DNSSEC validation disabled' }].filter(bit =>\n                  this.state.result?.[bit.k] === true).map(bit => bit.d).join(', ')}\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Type</th>\n                      <th>TTL</th>\n                      <th>Data</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.result?.Answer?.map((record, index) =>\n                      <tr key={index}>\n                        <td>{record.name}</td>\n                        <td>{ianaTypes[record.type].TYPE}</td>\n                        <td>{record.TTL}</td>\n                        <td>{record.data}</td>\n                      </tr>)}\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Container>\n        </Card></div>\n      </Collapse></>\n    );\n  }\n}","import React from 'react';\nimport { DnsClient } from './DnsClient'\n\nfunction App() {\n  return (<DnsClient />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}